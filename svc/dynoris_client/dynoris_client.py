# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from msrest import Configuration, Serializer, Deserializer
from msrest.exceptions import HttpOperationError
from msrest.pipeline import ClientRawResponse
from msrest.service_client import ServiceClient

from . import models
from .version import VERSION


class DynorisClientConfiguration(Configuration):
    """Configuration for DynorisClient
    Note that all parameters used to create this instance are saved as instance
    attributes.

    :param str base_url: Service URL
    """

    def __init__(
            self, base_url=None):

        if not base_url:
            base_url = 'http://localhost/'

        super(DynorisClientConfiguration, self).__init__(base_url)

        self.add_user_agent('dynoris/{}'.format(VERSION))


class DynorisClient(object):
    """DynorisClient

    :ivar config: Configuration for client.
    :vartype config: DynorisClientConfiguration

    :param str base_url: Service URL
    """

    def __init__(
            self, base_url=None):

        self.config = DynorisClientConfiguration(base_url)
        self._client = ServiceClient(None, self.config)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self.api_version = 'v1'
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)


    def cache_item(
            self, req=None, custom_headers=None, raw=False, **operation_config):
        """

        :param req:
        :type req: :class:`CacheItemRequest <swagger.models.CacheItemRequest>`
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the deserialized response
        :param operation_config: :ref:`Operation configuration overrides<msrest:optionsforoperations>`.
        :return: None or :class:`ClientRawResponse<msrest.pipeline.ClientRawResponse>` if raw=true
        :rtype: None or :class:`ClientRawResponse<msrest.pipeline.ClientRawResponse>`
        :raises: :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = '/api/Dynoris/CacheItem'

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if req is not None:
            body_content = self._serialize.body(req, 'CacheItemRequest')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response

    def commit_item(
            self, cache_key, update_key, custom_headers=None, raw=False, **operation_config):
        """

        :param cache_key:
        :type cache_key: str
        :param update_key:
        :type update_key: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the deserialized response
        :param operation_config: :ref:`Operation configuration overrides<msrest:optionsforoperations>`.
        :return: str or :class:`ClientRawResponse<msrest.pipeline.ClientRawResponse>` if raw=true
        :rtype: str or :class:`ClientRawResponse<msrest.pipeline.ClientRawResponse>`
        :raises: :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = '/api/Dynoris/CommitItem/{cacheKey}/{updateKey}'
        path_format_arguments = {
            'cacheKey': self._serialize.url("cache_key", cache_key, 'str'),
            'updateKey': self._serialize.url("update_key", update_key, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('str', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized

    def delete_item(
            self, cache_key=None, custom_headers=None, raw=False, **operation_config):
        """

        :param cache_key:
        :type cache_key: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the deserialized response
        :param operation_config: :ref:`Operation configuration overrides<msrest:optionsforoperations>`.
        :return: None or :class:`ClientRawResponse<msrest.pipeline.ClientRawResponse>` if raw=true
        :rtype: None or :class:`ClientRawResponse<msrest.pipeline.ClientRawResponse>`
        :raises: :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = '/api/Dynoris/DeleteItem'

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if cache_key is not None:
            body_content = self._serialize.body(cache_key, 'str')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response

    def cache_hash(
            self, req=None, custom_headers=None, raw=False, **operation_config):
        """

        :param req:
        :type req: :class:`CacheItemRequest <swagger.models.CacheItemRequest>`
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the deserialized response
        :param operation_config: :ref:`Operation configuration overrides<msrest:optionsforoperations>`.
        :return: None or :class:`ClientRawResponse<msrest.pipeline.ClientRawResponse>` if raw=true
        :rtype: None or :class:`ClientRawResponse<msrest.pipeline.ClientRawResponse>`
        :raises: :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = '/api/Dynoris/CacheHash'

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if req is not None:
            body_content = self._serialize.body(req, 'CacheItemRequest')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response

    def cache_as_hash(
            self, req=None, custom_headers=None, raw=False, **operation_config):
        """

        :param req:
        :type req: :class:`CacheItemRequest <swagger.models.CacheItemRequest>`
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the deserialized response
        :param operation_config: :ref:`Operation configuration overrides<msrest:optionsforoperations>`.
        :return: None or :class:`ClientRawResponse<msrest.pipeline.ClientRawResponse>` if raw=true
        :rtype: None or :class:`ClientRawResponse<msrest.pipeline.ClientRawResponse>`
        :raises: :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = '/api/Dynoris/CacheAsHash'

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if req is not None:
            body_content = self._serialize.body(req, 'CacheItemRequest')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response

    def expire_next(
            self, req=None, custom_headers=None, raw=False, **operation_config):
        """

        :param req:
        :type req: :class:`ExpiringStampRequest <swagger.models.ExpiringStampRequest>`
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the deserialized response
        :param operation_config: :ref:`Operation configuration overrides<msrest:optionsforoperations>`.
        :return: list of str or :class:`ClientRawResponse<msrest.pipeline.ClientRawResponse>` if raw=true
        :rtype: list of str or :class:`ClientRawResponse<msrest.pipeline.ClientRawResponse>`
        :raises: :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = '/api/ExpiringStamp/Next'

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if req is not None:
            body_content = self._serialize.body(req, 'ExpiringStampRequest')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('[str]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized

    def expire_commit(
            self, req=None, custom_headers=None, raw=False, **operation_config):
        """

        :param req:
        :type req: :class:`CommitItemRequest <swagger.models.CommitItemRequest>`
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the deserialized response
        :param operation_config: :ref:`Operation configuration overrides<msrest:optionsforoperations>`.
        :return: None or :class:`ClientRawResponse<msrest.pipeline.ClientRawResponse>` if raw=true
        :rtype: None or :class:`ClientRawResponse<msrest.pipeline.ClientRawResponse>`
        :raises: :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = '/api/ExpiringStamp/CommitItem'

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if req is not None:
            body_content = self._serialize.body(req, 'CommitItemRequest')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
