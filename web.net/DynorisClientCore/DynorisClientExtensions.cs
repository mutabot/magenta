// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace DynorisClient
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DynorisClient.
    /// </summary>
    public static partial class DynorisClientExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='req'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CacheItemAsync(this IDynorisClient operations, CacheItemRequest req = default(CacheItemRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CacheItemWithHttpMessagesAsync(req, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cacheKey'>
            /// </param>
            /// <param name='updateKey'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> CommitItemAsync(this IDynorisClient operations, string cacheKey, string updateKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CommitItemWithHttpMessagesAsync(cacheKey, updateKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cacheKey'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteItemAsync(this IDynorisClient operations, string cacheKey = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteItemWithHttpMessagesAsync(cacheKey, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='req'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CacheHashAsync(this IDynorisClient operations, CacheItemRequest req = default(CacheItemRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CacheHashWithHttpMessagesAsync(req, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='req'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CacheAsHashAsync(this IDynorisClient operations, CacheItemRequest req = default(CacheItemRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CacheAsHashWithHttpMessagesAsync(req, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='req'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> ExpireNextAsync(this IDynorisClient operations, ExpiringStampRequest req = default(ExpiringStampRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExpireNextWithHttpMessagesAsync(req, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='table'>
            /// </param>
            /// <param name='storeKey'>
            /// </param>
            /// <param name='itemJson'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ExpireCommitAsync(this IDynorisClient operations, string table = default(string), IList<ValueTupleStringString> storeKey = default(IList<ValueTupleStringString>), string itemJson = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ExpireCommitWithHttpMessagesAsync(table, storeKey, itemJson, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
