// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Dynoris
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for DynorisClient.
    /// </summary>
    public static partial class DynorisClientExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='req'>
            /// </param>
            public static void ApiDynorisCacheItemPost(this IDynorisClient operations, CacheItemRequest req = default(CacheItemRequest))
            {
                Task.Factory.StartNew(s => ((IDynorisClient)s).ApiDynorisCacheItemPostAsync(req), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='req'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiDynorisCacheItemPostAsync(this IDynorisClient operations, CacheItemRequest req = default(CacheItemRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiDynorisCacheItemPostWithHttpMessagesAsync(req, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cacheKey'>
            /// </param>
            /// <param name='updateKey'>
            /// </param>
            public static string ApiDynorisCommitItemByCacheKeyByUpdateKeyGet(this IDynorisClient operations, string cacheKey, string updateKey)
            {
                return Task.Factory.StartNew(s => ((IDynorisClient)s).ApiDynorisCommitItemByCacheKeyByUpdateKeyGetAsync(cacheKey, updateKey), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cacheKey'>
            /// </param>
            /// <param name='updateKey'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiDynorisCommitItemByCacheKeyByUpdateKeyGetAsync(this IDynorisClient operations, string cacheKey, string updateKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiDynorisCommitItemByCacheKeyByUpdateKeyGetWithHttpMessagesAsync(cacheKey, updateKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cacheKey'>
            /// </param>
            public static void ApiDynorisDeleteItemPost(this IDynorisClient operations, string cacheKey = default(string))
            {
                Task.Factory.StartNew(s => ((IDynorisClient)s).ApiDynorisDeleteItemPostAsync(cacheKey), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cacheKey'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiDynorisDeleteItemPostAsync(this IDynorisClient operations, string cacheKey = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiDynorisDeleteItemPostWithHttpMessagesAsync(cacheKey, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='req'>
            /// </param>
            public static void ApiDynorisCacheHashPost(this IDynorisClient operations, CacheItemRequest req = default(CacheItemRequest))
            {
                Task.Factory.StartNew(s => ((IDynorisClient)s).ApiDynorisCacheHashPostAsync(req), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='req'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiDynorisCacheHashPostAsync(this IDynorisClient operations, CacheItemRequest req = default(CacheItemRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiDynorisCacheHashPostWithHttpMessagesAsync(req, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='req'>
            /// </param>
            public static void ApiDynorisCacheAsHashPost(this IDynorisClient operations, CacheItemRequest req = default(CacheItemRequest))
            {
                Task.Factory.StartNew(s => ((IDynorisClient)s).ApiDynorisCacheAsHashPostAsync(req), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='req'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiDynorisCacheAsHashPostAsync(this IDynorisClient operations, CacheItemRequest req = default(CacheItemRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiDynorisCacheAsHashPostWithHttpMessagesAsync(req, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='req'>
            /// </param>
            public static IList<string> ApiExpiringStampNextPost(this IDynorisClient operations, ExpiringStampRequest req = default(ExpiringStampRequest))
            {
                return Task.Factory.StartNew(s => ((IDynorisClient)s).ApiExpiringStampNextPostAsync(req), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='req'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> ApiExpiringStampNextPostAsync(this IDynorisClient operations, ExpiringStampRequest req = default(ExpiringStampRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiExpiringStampNextPostWithHttpMessagesAsync(req, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='req'>
            /// </param>
            public static void ApiExpiringStampCommitItemPost(this IDynorisClient operations, CommitItemRequest req = default(CommitItemRequest))
            {
                Task.Factory.StartNew(s => ((IDynorisClient)s).ApiExpiringStampCommitItemPostAsync(req), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='req'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiExpiringStampCommitItemPostAsync(this IDynorisClient operations, CommitItemRequest req = default(CommitItemRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiExpiringStampCommitItemPostWithHttpMessagesAsync(req, null, cancellationToken).ConfigureAwait(false);
            }

    }
}
